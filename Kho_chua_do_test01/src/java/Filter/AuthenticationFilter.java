package Filter;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.util.*;

@WebFilter(filterName = "AuthenticationFilter", urlPatterns = {"/*"})
public class AuthenticationFilter implements Filter {

    // üîí B·∫£ng quy·ªÅn truy c·∫≠p cho t·ª´ng role
    private final Map<Integer, List<String>> roleAccessMap = new HashMap<>();

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // ‚úÖ Role 0 ‚Äì Admin / System Manager
        roleAccessMap.put(0, Arrays.asList(
                "/TongQuan", "/NhanVien", "/AddUser", "/BranchManagement", "/ChangePassWord", "/Customer", "/EditUser", "/ShiftUser",
                "/WarehouseManagement", "/InformationAccount", "/Logout", "/product", "/BranchCreate", "/InventoryMoves", "/Orders",
                "/Supplier", "/WareHouseCreate"
        ));

        // ‚úÖ Role 1 ‚Äì Branch Manager
        roleAccessMap.put(1, Arrays.asList(
                "/", "/", "/", "/Logout"
        ));

        // ‚úÖ Role 2 ‚Äì Sale
        roleAccessMap.put(2, Arrays.asList(
                "/sale", "/", "/", "/", "/Logout"
        ));

        // ‚úÖ Role 3 ‚Äì Warehouse Manager
        roleAccessMap.put(3, Arrays.asList(
                "/WareHouseProduct", "/NhapHang", "/XuatHang", "/ThongBao", "/Information", "/Logout"
        ));
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        HttpSession session = httpRequest.getSession(false);

        String requestURI = httpRequest.getRequestURI();
        String contextPath = httpRequest.getContextPath();
        String path = requestURI.substring(contextPath.length());

        // ‚úÖ Cho ph√©p truy c·∫≠p c√¥ng khai (public pages + static files)
        if (isPublicURL(path)) {
            chain.doFilter(request, response);
            return;
        }

        // ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if (session == null || session.getAttribute("currentUser") == null) {
            httpResponse.sendRedirect(contextPath + "/Login?error=needLogin");
            return;
        }

        // ‚úÖ L·∫•y roleID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        Integer roleID = (Integer) session.getAttribute("roleID");
        if (roleID == null) {
            httpResponse.sendRedirect(contextPath + "/Login");
            return;
        }

        // ‚úÖ Ki·ªÉm tra quy·ªÅn truy c·∫≠p c·ªßa role
        if (hasAccess(roleID, path)) {
            chain.doFilter(request, response);
        } else {
            httpResponse.sendRedirect(contextPath + "/AccessDenied.jsp");
        }
    }

    // üü¢ C√°c ƒë∆∞·ªùng d·∫´n public (ai c≈©ng v√†o ƒë∆∞·ª£c)
    private boolean isPublicURL(String path) {
        // C√°c trang public
        String[] publicPaths = {
            "/Login", "/Register", "/ForgotPassword", "/Dashboard", "/", "/", ""
        };
        for (String p : publicPaths) {
            if (path.equals(p) || path.startsWith(p)) {
                return true;
            }
        }

        // File tƒ©nh
        String[] staticExts = {
            ".css", ".js", ".png", ".jpg", ".jpeg", ".gif", ".ico", ".woff", ".woff2", ".ttf", ".eot", ".svg"
        };
        for (String ext : staticExts) {
            if (path.endsWith(ext)) {
                return true;
            }
        }

        // Th∆∞ m·ª•c tƒ©nh
        String[] publicFolders = {"/css/", "/js/", "/images/", "/fonts/", "/assets/", "/lib/"};
        for (String folder : publicFolders) {
            if (path.startsWith(folder)) {
                return true;
            }
        }

        return false;
    }

    // üîê Ki·ªÉm tra xem role c√≥ quy·ªÅn truy c·∫≠p URL kh√¥ng
    private boolean hasAccess(int roleID, String path) {
        List<String> allowed = roleAccessMap.get(roleID);
        if (allowed == null) {
            return false;
        }

        for (String allow : allowed) {
            if (path.startsWith(allow)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void destroy() {
    }
}
